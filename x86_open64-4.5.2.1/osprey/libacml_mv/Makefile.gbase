#
#  Copyright (C) 2009-2010 Advanced Micro Devices, Inc. All Rights Reserved.
#
#  This file is part of libacml_mv.
#
#  libacml_mv is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  libacml_mv is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with libacml_mv.  If not, see
#  <http://www.gnu.org/licenses/>.
#

# Makefile for libacml_mv library

# What we're building, and where to find it.
LIBRARY = libacml_mv.a
dso_version := 1
DSO = libacml_mv.so.$(dso_version)

ifeq ($(BUILD_TYPE), NONSHARED)
TARGETS = $(LIBRARY)
else
TARGETS = $(LIBRARY) $(DSO)
endif

# Makefile setup
include $(COMMONDEFS)

VPATH    = $(BUILD_BASE)/src:$(BUILD_BASE)/src/gas


ifeq ($(BUILD_LIBM_AVX),NO)
LCOPTS = $(STD_COMPILE_OPTS) $(STD_C_OPTS) 
else
LCOPTS = $(STD_COMPILE_OPTS) $(STD_C_OPTS) -D AVX_XOP_FMA4
endif
 
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = -I$(BUILD_BASE)/inc

# CFLAGS += -Wall -W -Wstrict-prototypes -Werror -fPIC -O2 $(DEBUG)




ifeq ($(BUILD_ARCH), X8664)

ifeq ($(BUILD_LIBM_AVX),NO)

CFILES = \
	acos.c \
	acosf.c \
	acosh.c \
	acoshf.c \
	asin.c \
	asinf.c \
	asinh.c \
	asinhf.c \
	atan2.c \
	atan2f.c \
	atan.c \
	atanf.c \
	atanh.c \
	atanhf.c \
	ceil.c \
	ceilf.c \
	cosh.c \
	coshf.c \
	exp_special.c \
	finite.c \
	finitef.c \
	floor.c \
	floorf.c \
        fma.c \
        fmaf.c \
	frexp.c \
	frexpf.c \
	hypot.c \
	hypotf.c \
	ilogb.c \
	ilogbf.c \
	ldexp.c \
	ldexpf.c \
	libm_special.c \
	llrint.c \
	llrintf.c \
	llround.c \
	llroundf.c \
	log1p.c \
	log1pf.c \
	logb.c \
	logbf.c \
	log_special.c \
	lrint.c \
	lrintf.c \
	lround.c \
	lroundf.c \
	modf.c \
	modff.c \
	nan.c \
	nanf.c \
	nearbyintf.c \
	nextafter.c \
	nextafterf.c \
	nexttoward.c \
	nexttowardf.c \
	pow_special.c \
	remainder_piby2.c \
	remainder_piby2d2f.c \
        remquo.c \
        remquof.c \
	rint.c \
	rintf.c \
	roundf.c \
	scalbln.c \
	scalblnf.c \
	scalbn.c \
	scalbnf.c \
	sincos_special.c \
	sinh.c \
	sinhf.c \
	sqrt.c \
	sqrtf.c \
	tan.c \
	tanf.c \
	tanh.c \
	tanhf.c\
        vrd2_pow.c \
        vrd2_tan.c \
        vrs4_tanf.c 
        
ASFILES = \
        cbrtf.S \
        cbrt.S \
        copysignf.S \
        copysign.S \
        cosf.S \
        cos.S \
        exp10f.S \
        exp10.S \
        exp2f.S \
        exp2.S \
        expf.S \
        expm1f.S \
        expm1.S \
        exp.S \
        fabsf.S \
        fabs.S \
        fdimf.S \
        fdim.S \
        fmaxf.S \
        fmax.S \
        fminf.S \
        fmin.S \
        fmodf.S \
        fmod.S \
        internal_vrd4_exp.S \
        internal_vrd4_log.S \
        log10f.S \
        log10.S \
        log2f.S \
        log2.S \
        logf.S \
        log.S \
        nearbyint.S \
        powf.S \
        pow.S \
        remainder_piby2_new.S \
        remainder_piby2f_new.S \
        remainderf.S \
        remainder.S \
        round.S \
        sincosf.S \
        sincos.S \
        sinf.S \
        sin.S \
        truncf.S \
        trunc.S \
        vrd2_cbrt.S \
        vrd2_cos.S \
        vrd2_exp.S \
        vrd2_exp10.S \
        vrd2_exp2.S \
        vrd2_expm1.S \
        vrd2_log.S \
        vrd2_log10.S \
        vrd2_log1p.S \
        vrd2_log2.S \
        vrd2_sin.S \
        vrd2_sincos.S \
        vrda_cbrt.S \
        vrda_cos.S \
        vrd4frcpa.S \
        vrda_scaled_logr.S\
        vrda_exp.S \
        vrda_exp10.S \
        vrda_exp2.S \
        vrda_expm1.S \
        vrda_log.S \
        vrda_log10.S \
        vrda_log1p.S \
        vrda_log2.S \
        vrda_sincos.S \
        vrda_sin.S \
        vrs4_cbrtf.S \
        vrs4_cosf.S \
        vrs4_exp10f.S \
        vrs4_exp2f.S \
        vrs4_expf.S \
        vrs4_expm1f.S \
        vrs4_log10f.S \
        vrs4_log1pf.S \
        vrs4_log2f.S \
        vrs4_logf.S \
        vrs4_powf.S \
        vrs4_powxf.S \
        vrs4_sincosf.S \
        vrs4_sinf.S \
        vrsa_cbrtf.S \
        vrsa_cosf.S \
        vrsa_exp10f.S \
        vrsa_exp2f.S \
        vrsa_expf.S \
        vrsa_expm1f.S \
        vrsa_log10f.S \
        vrsa_log1pf.S \
        vrsa_log2f.S \
        vrsa_logf.S \
        vrsa_powf.S \
        vrsa_powxf.S \
        vrsa_sincosf.S \
        vrsa_sinf.S

else

CFILES = \
        acos.c \
        acosf.c \
        acosh.c \
        acoshf.c \
        asin.c \
        asinf.c \
        asinh.c \
        asinhf.c \
        atan2.c \
        atan2f.c \
        atan.c \
        atanf.c \
        atanh.c \
        atanhf.c \
        ceil.c \
        ceilf.c \
        cosh.c \
        coshf.c \
        exp_special.c \
        finite.c \
        finitef.c \
        floor.c \
        floorf.c \
        fma.c \
        fmaf.c \
        frexp.c \
        frexpf.c \
        hypot.c \
        hypotf.c \
        ilogb.c \
        ilogbf.c \
        ldexp.c \
        ldexpf.c \
        libm_special.c \
        llrint.c \
        llrintf.c \
        llround.c \
        llroundf.c \
        log1p.c \
        log1pf.c \
        logb.c \
        logbf.c \
        log_special.c \
        lrint.c \
        lrintf.c \
        lround.c \
        lroundf.c \
        modf.c \
        modff.c \
        MapEntryPoints.c \
        nan.c \
        nanf.c \
        nearbyintf.c \
        nextafter.c \
        nextafterf.c \
        nexttoward.c \
        nexttowardf.c \
        pow_special.c \
        remainder_piby2.c \
        remainder_piby2d2f.c \
        remquo.c \
        remquof.c \
        rint.c \
        rintf.c \
        roundf.c \
        scalbln.c \
        scalblnf.c \
        scalbn.c \
        scalbnf.c \
        sincos_special.c \
        sinh.c \
        sinhf.c \
        sqrt.c \
        sqrtf.c \
        tan.c \
        tanf.c \
        tanh.c \
        tanhf.c\
        vrd2_pow.c \
        vrd2_tan.c \
        vrs4_tanf.c

ASFILES = \
        cbrtf.S \
        cbrt.S \
        cbrt_bdozr.S \
        cbrtf_bdozr.S \
        copysignf.S \
        copysign.S \
        cosf.S \
        cos_bdozr.S \
        cosf_bdozr.S \
        cos.S \
        exp10_bdozr.S \
        exp10f.S \
        exp10f_bdozr.S \
        exp10.S \
        exp2_bdozr.S \
        exp2f.S \
        exp10f_bdozr.S \
        exp2.S \
        exp2f_bdozr.S \
        exp_bdozr.S \
        expf.S \
        expf_bdozr.S\
        expm1f.S \
        expm1_bdozr.S \
        expm1f_bdozr.S \
        expm1.S \
        exp.S \
        fabsf.S \
        fabs.S \
        fdimf.S \
        fdim.S \
        fmaxf.S \
        fmax.S \
        fminf.S \
        fmin.S \
        fmodf.S \
        fmod.S \
        fma_bdozr.S\
        fmaf_bdozr.S\
        internal_vrd4_exp.S \
        internal_vrd4_log.S \
        log10f.S \
        log10.S \
        log10_bdozr.S \
        log10f_bdozr.S \
        log1p_bdozr.S \
        log1pf_bdozr.S \
        log2_bdozr.S  \
        log2f.S \
        log2f_bdozr.S \
        log2.S \
        logf.S \
        log.S \
        log_bdozr.S \
        logf_bdozr.S \
        map.S \
        nearbyint.S \
        powf.S \
        pow.S \
        remainder_piby2_new.S \
        remainder_piby2f_new.S \
        remainderf.S \
        remainder.S \
        round.S \
        sincosf.S \
        sin_bdozr.S \
        sincos.S \
        sinf.S \
        sin.S \
        sinf_bdozr.S \
        tan_bdozr.S \
        tanf_bdozr.S \
        truncf.S \
        trunc.S \
        vrd2_cbrt.S \
        vrd2_cbrt_bdozr.S \
        vrd2_cos.S \
        vrd2_cos_bdozr.S \
        vrd2_exp.S \
        vrd2_exp10.S \
        vrd2_exp10_bdozr.S\
        vrd2_exp2.S \
        vrd2_exp2_bdozr.S \
        vrd2_exp_bdozr.S \
        vrd2_expm1.S \
        vrd2_expm1_bdozr.S \
        vrd2_log.S \
        vrd2_log10.S \
        vrd2_log10_bdozr.S \
        vrd2_log1p.S \
        vrd2_log1p_bdozr.S \
        vrd2_log2.S \
        vrd2_log2_bdozr.S \
        vrd2_log_bdozr.S \
        vrd2_sin.S \
        vrd2_sin_bdozr.S \
        vrd2_sincos.S \
        vrd2_tan_bdozr.S \
        vrda_cbrt.S \
        vrda_cos.S \
        vrd4frcpa.S \
        vrda_scaled_logr.S\
        vrda_exp.S \
        vrda_exp10.S \
        vrda_exp10.S \
        vrda_exp10_bdozr.S \
        vrda_exp2.S \
        vrda_exp2_bdozr.S \
        vrda_exp_bdozr.S \
        vrda_expm1.S \
        vrda_expm1_bdozr.S \
        vrda_log.S \
        vrda_log10.S \
        vrda_log1p.S \
        vrda_log2.S \
        vrda_sincos.S \
        vrda_sin.S \
        vrs4_cbrtf.S \
        vrs4_cbrtf_bdozr.S \
        vrs4_cosf.S \
        vrs4_cosf_bdozr.S \
        vrs4_exp10f.S \
        vrs4_exp10f_bdozr.S \
        vrs4_exp2f.S \
        vrs4_exp2f_bdozr.S \
        vrs4_expf.S \
        vrs4_expf_bdozr.S \
        vrs4_expm1f.S \
        vrs4_expm1f_bdozr.S \
        vrs4_log10f.S \
        vrs4_log10f_bdozr.S \
        vrs4_log1pf.S \
        vrs4_log1pf_bdozr.S \
        vrs4_log2f.S \
        vrs4_log2f_bdozr.S \
        vrs4_logf.S \
        vrs4_logf_bdozr.S \
        vrs4_powf.S \
        vrs4_powxf.S \
        vrs4_sincosf.S \
        vrs4_sinf.S \
        vrs4_sinf_bdozr.S \
        vrs4_tanf_bdozr.S \
        vrsa_cbrtf.S \
        vrsa_cosf.S \
        vrsa_exp10f.S \
        vrsa_exp10f_bdozr.S \
        vrsa_exp2f.S \
        vrsa_exp2f_bdozr.S \
        vrsa_expf_bdozr.S \
        vrsa_expf.S \
        vrsa_expm1f.S \
        vrsa_expm1f_bdozr.S\
        vrsa_log10f.S \
        vrsa_log1pf.S \
        vrsa_log2f.S \
        vrsa_logf.S \
        vrsa_powf.S \
        vrsa_powxf.S \
        vrsa_sincosf.S \
        vrsa_sinf.S
endif

else

# The special processing of the -lm option in the compiler driver should
# be delayed until all of the options have been parsed.  Until the
# driver is cleaned up, it is important that processing be the same on
# all architectures.  Thus we add an empty 32-bit ACML vector math
# library.

dummy.c :
	echo "void libacml_mv_placeholder() {}" > dummy.c

CFILES = dummy.c
LDIRT += dummy.c

endif


default:
	$(MAKE)  first
	$(MAKE)  $(TARGETS)
	$(MAKE)  last

first : 
ifndef SKIP_DEP_BUILD
	$(call submake,$(BUILD_AREA)/include)
endif

last : make_libdeps

include $(COMMONRULES)

$(LIBRARY): $(OBJECTS)
	$(ar) cru $@ $^
	$(ranlib) $@

$(DSO): $(OBJECTS:%.o=%.pic.o)
	$(ld) $(STD_DSO_LOADOPTS) -Wl,-x -o $@ $^ -L.
	$(ln) -sf $(DSO) $(basename $(DSO))

